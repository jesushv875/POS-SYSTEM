// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nombre   String
  correo   String @unique
  password String
  rol      String

  logs   Log[] // Relación con los logs (se mantiene)
  ventas Venta[] // Relación con las ventas (se agrega)
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(100)
  telefono  String?    @db.VarChar(20)
  email     String?    @unique @db.VarChar(100)
  direccion String?    @db.Text
  creadoEn  DateTime   @default(now())
  productos Producto[]
}

model Producto {
  id           Int        @id @default(autoincrement())
  nombre       String
  precio       Float
  stock        Int
  proveedorId  Int
  proveedor    Proveedor  @relation(fields: [proveedorId], references: [id])
  codigoBarras String?
  imagenUrl    String?
  categoriaId  Int?
  categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  stockMinimo  Int?
  
  // Relación inversa con DetalleVenta
  detalleVentas DetalleVenta[] // Esto es lo que falta
}

model Categoria {
  id      Int      @id @default(autoincrement())
  nombre  String
  productos Producto[]
}

model Log {
  id        Int      @id @default(autoincrement())
  usuarioId Int?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  accion    String
  entidad   String
  entidadId Int?
  detalles  String?
  fecha     DateTime @default(now())
}

model Venta {
  id           Int            @id @default(autoincrement())
  usuarioId    Int?
  usuario      Usuario?       @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  fecha        DateTime       @default(now())
  total        Decimal
  montoPagado  Decimal
  cambio       Decimal

  metodoPago   String?         // "efectivo", "tarjeta", "mixto"
  pagoEfectivo Decimal?       // Opcional si método mixto
  pagoTarjeta  Decimal?       // Opcional si método mixto

  detalles     DetalleVenta[]
}

model DetalleVenta {
  id         Int     @id @default(autoincrement())
  ventaId    Int
  productoId Int
  cantidad   Int
  subtotal   Decimal
  venta      Venta   @relation(fields: [ventaId], references: [id])
  producto   Producto @relation(fields: [productoId], references: [id])
}

model Caja {
  id           Int      @id @default(autoincrement())
  fecha        DateTime @default(now())
  fondoInicial Decimal
  totalVentas  Decimal  @default(0)
  totalEnCaja  Decimal
  movimientos  CajaMovimiento[]
}

model CajaMovimiento {
  id       Int      @id @default(autoincrement())
  fecha    DateTime @default(now())
  tipo     String   // "ingreso" o "egreso"
  monto    Decimal
  motivo   String
  cajaId   Int
  caja     Caja     @relation(fields: [cajaId], references: [id])
}
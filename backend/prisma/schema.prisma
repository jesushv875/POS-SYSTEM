generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id       Int    @id @default(autoincrement())
  nombre   String
  correo   String @unique
  password String
  rol      String

  logs   Log[]
  ventas Venta[]
  cortes CorteCaja[] // ‚Üê campo agregado
}

model Proveedor {
  id        Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(100)
  telefono  String?    @db.VarChar(20)
  email     String?    @unique @db.VarChar(100)
  direccion String?    @db.Text
  creadoEn  DateTime   @default(now())
  productos Producto[]
}

model Producto {
  id           Int        @id @default(autoincrement())
  nombre       String
  precio       Float
  stock        Int?
  proveedorId  Int?
  proveedor    Proveedor? @relation(fields: [proveedorId], references: [id])
  codigoBarras String?    @unique
  imagenUrl    String?
  categoriaId  Int?
  pasillo      String?
  anaquel      String?
  piso         String?
  categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  stockMinimo  Int?

  detalleVentas DetalleVenta[]
  movimientos   MovimientoInventario[]
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String
  productos Producto[]
}

model Log {
  id        Int      @id @default(autoincrement())
  usuarioId Int?
  usuario   Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  accion    String
  entidad   String
  entidadId Int?
  detalles  String?
  fecha     DateTime @default(now())
}

model Venta {
  id          Int      @id @default(autoincrement())
  usuarioId   Int?
  usuario     Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  fecha       DateTime @default(now())
  total       Decimal
  montoPagado Decimal
  cambio      Decimal

  metodoPago   String?
  pagoEfectivo Decimal?
  pagoTarjeta  Decimal?

  detalles DetalleVenta[]
}

model DetalleVenta {
  id         Int      @id @default(autoincrement())
  ventaId    Int
  productoId Int
  cantidad   Int
  subtotal   Decimal
  venta      Venta    @relation(fields: [ventaId], references: [id])
  producto   Producto @relation(fields: [productoId], references: [id])
}

model Caja {
  id           Int              @id @default(autoincrement())
  fecha        DateTime         @default(now())
  fondoInicial Decimal
  totalVentas  Decimal          @default(0)
  totalEnCaja  Decimal
  estado       Boolean          @default(false) // false = cerrada, true = abierta
  movimientos  CajaMovimiento[]
}

model CajaMovimiento {
  id     Int      @id @default(autoincrement())
  fecha  DateTime @default(now())
  tipo   String
  monto  Decimal
  motivo String
  cajaId Int
  caja   Caja     @relation(fields: [cajaId], references: [id])
}

model CorteCaja {
  id             Int      @id @default(autoincrement())
  fecha          DateTime @default(now())
  fondoInicial   Decimal
  totalVentas    Decimal
  ingresos       Decimal
  egresos        Decimal
  totalEntregado Decimal
  usuarioId      Int?
  usuario        Usuario? @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
}

model MovimientoInventario {
  id         Int      @id @default(autoincrement())
  tipo       String
  motivo     String
  cantidad   Int
  imagenUrl  String?
  comentario String?
  usuarioId  Int
  productoId Int
  fecha      DateTime @default(now())

  producto Producto @relation(fields: [productoId], references: [id])
}
